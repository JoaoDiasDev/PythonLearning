Documenting as a docstring
Python's help function can be very useful for easily getting documentation about classes and methods. You can call the help function from one of the classes. This function returns some basic information about the methods defined in the class.
>>> class Apple:
...     def __init__(self, color, flavor):
...         self.color = color
...         self.flavor = flavor
...     def __str__(self):
...         return "This apple is {} and its flavor is {}".format(self.color, self.flavor)
... 
>>> help(Apple)
Help on class Apple in module __main__:

class Apple(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, color, flavor)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)


You can use docstrings to add documents to your own classes, methods, and functions. A docstring is a short text description of what you do. You can add a docstring to a method, function, or class by defining it first and then adding a description inside triple quotes. Let's take an example of this function.

>>> def to_seconds(hours, minutes, seconds):
...     """Returns the amount of seconds in the given hours, minutes and seconds."""
...     return hours*3600+minutes*60+seconds
... 

On the first line, there is a function called to_seconds, followed by a docstring indented to the right and enclosed in triple quotes. Finally, the function body. Now, if you call the help function from a to_seconds function, you get a handy description of what the function does.

>>> help(to_seconds)
Help on function to_seconds in module __main__:

to_seconds(hours, minutes, seconds)
    Returns the amount of seconds in the given hours, minutes and seconds.

Not only are doctrinal for documenting user-defined classes, methods, and functions, but they're also useful when working with new libraries or functions. When you need to work with code written by someone else, you'll be very grateful for the docstring!
