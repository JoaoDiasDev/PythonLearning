Modify a list
The list and the string are both sequences, but the big difference between the two is that the list is mutable. This means that you can change the contents of the list, unlike strings that cannot be changed. You can add, remove, or modify elements of a list.

You can use the append method to add an element to the end of the list. Use dot notation to call this method from the list and pass the element you want to add as a parameter. For example, list.append("New data") appends the string "New data" to the end of a list named list.

If you want to add an element to a list at a specific location, you can use the insert method. This method takes two parameters: The first parameter specifies the index of the list, and the second parameter is the element to add to the list. Therefore, list.insert(0, "New data") appends the string "New data" to the front of the list. This does not overwrite any existing elements at the beginning of the list. Move all the other elements one by one. If you specify an index that is larger than the length of the list, the element is simply appended to the end of the list.

You can use the remove method to remove an element from the list. This method takes the element as a parameter and removes the first entry in the element. If an element cannot be found in the list, you will get a ValueError error stating that the element cannot be found in the list.

You can also use the pop method to remove an element from the list. This method differs from the remove method in that it takes the index as a parameter and returns the removed element. This can be useful if you don't know what the value is, but you know where it is. This can also be useful if you need to access data and want to remove it from the list.

Finally, if you use indexing to overwrite the values stored in the specified index, you can change the elements in the list. For example, you can type list[0] = "Old data" to overwrite the first element in the list with the new string "Old data".

