Default string method
In Python, strings are immutable. In other words, it cannot be modified. So if you want to fix a typo in a string, you simply can't fix the wrong character. You must create a new string with typos fixed. You can also assign a new value to a variable that holds a string.

If you're not sure what the index of a typo is, you can use the string method index to find the typo and return the index. Let's say you have the string "lions tigers and bears" in the animals variable. You can use animals.index("g") to find indexes that contain the letter g. In this case, an index of 8 is returned. You can also use a substring to find the index where the substring begins. animals.index("bears") returns 17. Because that's the beginning of the substring. If there is more than one match for the substring, the index method returns the first match. If you try to find a substring that does not exist in the string, you will receive a ValueError explaining that the substring could not be found.

You can avoid ValueError by first checking if the string has a substring. This can be done using the in keyword. We saw this keyword earlier when dealing with for loops. In this case, it is a conditional that becomes true or false. If a substring is found in the string, it becomes true. If a substring cannot be found in the string, it is false. You can use the previous variable animals to perform "horses" in animals to check if a substring named "horses" exists in the variable. In this case, horses are evaluated as false as they are not included in the example string. If you performed "tigers" in animals, you can get the charm because this substring is contained in the string.

