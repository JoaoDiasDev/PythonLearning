Predefined
Dictionaries are another data structure in Python. It is similar to a list in that it can be used to organize the data into collections. However, the data in the dictionary is not accessed based on location. The data in the dictionary consists of pairs of keys and values. Use the key to access its value. If the list index is always numeric, the dictionary key can be any other data type, such as string, integer, floating point, or tuple.

When you create a dictionary, use braces ({}). When you store a value in a dictionary, you specify the key first, separated by a colon, and then specify that value. For example, animals = { "bears":10, "lions":1, "tigers":2 } creates a dictionary with three key-value pairs stored in the variable animals. The "bears" key points to the integer value 10, the "lions" key points to the integer value 1, and the "tigers" point to the integer 2. You can access values by referencing a key, such as animals["bears"]. Because this is the value corresponding to this key, it returns an integer of 10.

You can also use the in keyword to check if the dictionary contains the key. As with the other uses of this keyword, if you find a key in the dictionary, it returns true. Otherwise, it returns false.

The dictionary is changeable. This means that you can modify elements in a dictionary similar to a list by adding, removing, and replacing elements. You can add a new key value pair to the dictionary by assigning a value to the key, such as animals["zebras"] = 2. This will generate a new key in the animal dictionary named zebra and store the value 2. You can modify the value of an existing key by doing the same. So animals["bears"] = 11 changes the value stored in the bears key from 10 to 11. Finally, you can use the del keyword to remove an element from the dictionary. del animals["lions"] allows you to remove key value pairs from the animal dictionary.
